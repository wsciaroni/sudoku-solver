#include <gtest/gtest.h>

#include <sudoku-solver.h>
#include <SudokuValidator.h>

/*
This testsuite is designed to test the entire solution. I am running a known input and output through several times
*/

class SolveManyTest : public testing::TestWithParam<std::vector<std::vector<char>>>
{
   // You can implement all the usual fixture class members here.
   // To access the test parameter, call GetParam() from class
   // TestWithParam<T>.
};

TEST_P(SolveManyTest, testSolution)
{
   // Inside a test, access the test parameter with the GetParam() method
   // of the TestWithParam<T> class:
   auto board = GetParam();
   Solution s;
   s.solveSudoku(board);
   EXPECT_TRUE(SudokuValidator::isSudokuValid(board));
}

std::vector<std::vector<char>> blankInput =
    {{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'}};

std::vector<std::vector<char>> leetcodeSample =
    {{'5', '3', '.', '.', '7', '.', '.', '.', '.'},
     {'6', '.', '.', '1', '9', '5', '.', '.', '.'},
     {'.', '9', '8', '.', '.', '.', '.', '6', '.'},
     {'8', '.', '.', '.', '6', '.', '.', '.', '3'},
     {'4', '.', '.', '8', '.', '3', '.', '.', '1'},
     {'7', '.', '.', '.', '2', '.', '.', '.', '6'},
     {'.', '6', '.', '.', '.', '.', '2', '8', '.'},
     {'.', '.', '.', '4', '1', '9', '.', '.', '5'},
     {'.', '.', '.', '.', '8', '.', '.', '7', '9'}};

std::vector<std::vector<char>> nyTimesEasy =
    {{'1', '.', '4', '.', '.', '.', '.', '2', '8'},
     {'.', '3', '6', '.', '5', '.', '1', '.', '.'},
     {'.', '.', '2', '9', '1', '4', '6', '.', '.'},
     {'.', '5', '9', '3', '8', '.', '.', '.', '2'},
     {'4', '.', '.', '1', '9', '.', '.', '.', '5'},
     {'.', '.', '.', '4', '.', '.', '7', '9', '.'},
     {'2', '.', '3', '.', '.', '1', '9', '8', '.'},
     {'8', '6', '1', '.', '4', '9', '.', '.', '.'},
     {'.', '4', '.', '.', '.', '8', '.', '6', '.'}};

std::vector<std::vector<char>> nyTimesMedium =
    {{'.', '.', '6', '.', '.', '.', '.', '1', '2'},
     {'3', '.', '8', '.', '5', '.', '.', '.', '.'},
     {'.', '.', '.', '7', '.', '4', '.', '.', '.'},
     {'5', '.', '.', '6', '2', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '7', '.', '.', '.'},
     {'4', '1', '.', '.', '8', '.', '.', '.', '.'},
     {'.', '9', '.', '5', '.', '.', '.', '8', '7'},
     {'8', '.', '.', '.', '.', '2', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '6', '.', '9'}};

std::vector<std::vector<char>> nyTimesHard =
    {{'.', '5', '1', '8', '.', '.', '3', '.', '.'},
     {'.', '2', '.', '.', '4', '.', '5', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '7', '.', '.'},
     {'1', '.', '3', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '9', '2', '.', '8', '.'},
     {'.', '.', '.', '.', '.', '8', '.', '6', '.'},
     {'.', '4', '.', '.', '7', '.', '.', '.', '.'},
     {'6', '.', '.', '.', '.', '.', '.', '1', '9'},
     {'8', '.', '.', '.', '.', '.', '.', '.', '.'}};

std::vector<std::vector<char>> SudokuComEvil = {
    {'.', '4', '.', '.', '1', '9', '.', '7', '6'},
    {'8', '.', '.', '.', '.', '.', '.', '.', '3'},
    {'.', '.', '.', '6', '.', '.', '.', '.', '.'},
    {'.', '9', '.', '.', '2', '7', '.', '1', '.'},
    {'.', '.', '4', '.', '.', '.', '9', '.', '.'},
    {'.', '.', '.', '.', '.', '5', '.', '.', '.'},
    {'.', '.', '3', '.', '6', '2', '.', '.', '7'},
    {'.', '2', '.', '5', '.', '.', '.', '.', '.'},
    {'.', '.', '.', '4', '.', '.', '.', '6', '.'}};

INSTANTIATE_TEST_SUITE_P(SolveManyTestSuite,
                         SolveManyTest,
                         testing::Values(blankInput, leetcodeSample, nyTimesEasy, nyTimesMedium, nyTimesHard, SudokuComEvil));
