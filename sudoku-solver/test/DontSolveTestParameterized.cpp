#include <gtest/gtest.h>

#include <sudoku-solver.h>
#include<SudokuValidator.h>

/*
This testsuite is designed to test the entire solution. I am running a known input and output through several times
*/

class DontSolveManyTest : public testing::TestWithParam<std::vector<std::vector<char>>>
{
    // You can implement all the usual fixture class members here.
    // To access the test parameter, call GetParam() from class
    // TestWithParam<T>.
};

TEST_P(DontSolveManyTest, testSolution)
{
    // Inside a test, access the test parameter with the GetParam() method
    // of the TestWithParam<T> class:
    auto board = GetParam();
    Solution s;
    s.solveSudoku(board);
    EXPECT_FALSE(SudokuValidator::isSudokuValid(board));
}

std::vector<std::vector<char>> twoOnesInBlockA =
    {{'1', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '1', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'}};

std::vector<std::vector<char>> twoOnesInBlockB =
    {{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '1', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '1', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'}};

std::vector<std::vector<char>> twoOnesInBlockC =
    {{'.', '.', '.', '.', '.', '.', '.', '1', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '1'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'}};

std::vector<std::vector<char>> twoOnesInBlockD =
    {{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'1', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '1', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'}};

std::vector<std::vector<char>> twoOnesInBlockE =
    {{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '1', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '1', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'}};

std::vector<std::vector<char>> twoOnesInBlockF =
    {{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '1', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '1', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'}};

std::vector<std::vector<char>> twoOnesInBlockG =
    {{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '1', '.', '.', '.', '.', '.', '.', '.'},
     {'1', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'}};

std::vector<std::vector<char>> twoOnesInBlockH =
    {{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '1', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '1', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'}};

std::vector<std::vector<char>> twoOnesInBlockI =
    {{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '1', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '1', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'}};

std::vector<std::vector<char>> twoOnesInRowA =
    {{'1', '.', '.', '.', '1', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'}};

std::vector<std::vector<char>> twoOnesInRowB =
    {{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '1', '.', '.', '.', '.', '.', '1', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'}};

std::vector<std::vector<char>> twoOnesInRowC =
    {{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '1', '.', '.', '.', '.', '1', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'}};

std::vector<std::vector<char>> twoOnesInRowD =
    {{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '1', '.', '.', '.', '.', '.', '1', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'}};

std::vector<std::vector<char>> twoOnesInRowE =
    {{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '1', '.', '.', '.', '1', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'}};

std::vector<std::vector<char>> twoOnesInRowF =
    {{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '1', '.', '.', '.', '.', '1', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'}};

std::vector<std::vector<char>> twoOnesInRowG =
    {{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '1', '.', '.', '.', '.', '.', '1'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'}};

std::vector<std::vector<char>> twoOnesInRowH =
    {{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'1', '.', '.', '.', '.', '.', '.', '1', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'}};

std::vector<std::vector<char>> twoOnesInRowI =
    {{'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
     {'1', '.', '.', '.', '.', '1', '.', '.', '.'}};

INSTANTIATE_TEST_SUITE_P(DontSolveManyTestSuite,
                         DontSolveManyTest,
                         testing::Values(
                             twoOnesInBlockA,
                             twoOnesInBlockB,
                             twoOnesInBlockC,
                             twoOnesInBlockD,
                             twoOnesInBlockE,
                             twoOnesInBlockF,
                             twoOnesInBlockG,
                             twoOnesInBlockH,
                             twoOnesInBlockI,

                             twoOnesInRowA,
                             twoOnesInRowB,
                             twoOnesInRowC,
                             twoOnesInRowD,
                             twoOnesInRowE,
                             twoOnesInRowF,
                             twoOnesInRowG,
                             twoOnesInRowH,
                             twoOnesInRowI));